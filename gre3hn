#!/usr/bin/env bash
#
# Universal Linux Anonymous Shield engineered by 0xb0rn3
# Fixed initialization order to prevent directory/logging issues
#

set -euo pipefail

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Global variables
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CONFIG_DIR="$HOME/.anon_shield"
CONFIG_FILE="$CONFIG_DIR/config.conf"
LOG_FILE="$CONFIG_DIR/shield.log"
PID_FILE="$CONFIG_DIR/shield.pid"
PYTHON_SCRIPT="$SCRIPT_DIR/anon_shield_core.py"

# Distribution detection variables
DISTRO=""
PACKAGE_MANAGER=""
SERVICE_MANAGER=""

# Status tracking variables
TOR_RUNNING=false
I2P_RUNNING=false
MAC_RANDOMIZED=false
DNS_SECURED=false
FIREWALL_ACTIVE=false

# Print functions (these don't need logging, so they're safe to use early)
print_success() { echo -e "${GREEN}✓${NC} $1"; }
print_error() { echo -e "${RED}✗${NC} $1"; }
print_warning() { echo -e "${YELLOW}⚠${NC} $1"; }
print_info() { echo -e "${BLUE}ℹ${NC} $1"; }
print_banner() {
    echo -e "${PURPLE}"
    cat << 'EOF'
    ╔══════════════════════════════════════════╗
    ║        Anonymous Network Shield          ║
    ║      Universal Linux Privacy Tool        ║
    ╚══════════════════════════════════════════╝
EOF
    echo -e "${NC}"
}

# Early initialization - create directories first (MUST be called before any logging)
early_init() {
    # Handle different user contexts (regular user vs root via sudo)
    if [[ -n "${SUDO_USER:-}" ]] && [[ "$EUID" -eq 0 ]]; then
        # Running as root via sudo - use the original user's home
        local original_home
        original_home=$(getent passwd "$SUDO_USER" | cut -d: -f6)
        CONFIG_DIR="$original_home/.anon_shield"
    fi
    
    # Create config directory structure immediately
    if ! mkdir -p "$CONFIG_DIR" 2>/dev/null; then
        print_warning "Could not create config directory $CONFIG_DIR"
        # Fallback to /tmp for this session
        CONFIG_DIR="/tmp/.anon_shield_$$"
        mkdir -p "$CONFIG_DIR"
        print_info "Using temporary directory: $CONFIG_DIR"
    fi
    
    # Update file paths based on final CONFIG_DIR
    CONFIG_FILE="$CONFIG_DIR/config.conf"
    LOG_FILE="$CONFIG_DIR/shield.log"
    PID_FILE="$CONFIG_DIR/shield.pid"
    
    # Initialize log file with proper permissions
    if ! touch "$LOG_FILE" 2>/dev/null; then
        print_warning "Could not create log file, logging to stdout only"
        LOG_FILE="/dev/stdout"
    else
        # If we created the directory as root but it should belong to a user, fix permissions
        if [[ -n "${SUDO_USER:-}" ]] && [[ "$EUID" -eq 0 ]] && [[ "$LOG_FILE" != "/dev/stdout" ]]; then
            chown -R "$SUDO_USER:$(id -gn "$SUDO_USER")" "$CONFIG_DIR" 2>/dev/null || true
        fi
    fi
}

# Safe logging function that works even if directories don't exist
log() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local formatted_message="${timestamp} [${level}] ${message}"
    
    # Always echo to stdout first for immediate feedback
    echo -e "$formatted_message"
    
    # Then try to append to log file if it's not stdout and exists
    if [[ "$LOG_FILE" != "/dev/stdout" ]] && [[ -f "$LOG_FILE" ]]; then
        echo -e "$formatted_message" >> "$LOG_FILE" 2>/dev/null || true
    fi
}

# Check if running as root (when needed)
check_root() {
    if [[ $EUID -ne 0 ]]; then
        print_error "This script must be run as root (use sudo)"
        print_info "Example: sudo $0 $*"
        exit 1
    fi
}

# Detect Linux distribution (now safe to call log after early_init)
detect_distro() {
    if [[ -f /etc/arch-release ]]; then
        DISTRO="arch"
        PACKAGE_MANAGER="pacman"
        SERVICE_MANAGER="systemctl"
    elif [[ -f /etc/debian_version ]]; then
        DISTRO="debian"
        PACKAGE_MANAGER="apt"
        SERVICE_MANAGER="systemctl"
    elif [[ -f /etc/redhat-release ]]; then
        DISTRO="redhat"
        if command -v dnf &> /dev/null; then
            PACKAGE_MANAGER="dnf"
        else
            PACKAGE_MANAGER="yum"
        fi
        SERVICE_MANAGER="systemctl"
    elif [[ -f /etc/SuSE-release ]] || [[ -f /etc/SUSE-brand ]]; then
        DISTRO="suse"
        PACKAGE_MANAGER="zypper"
        SERVICE_MANAGER="systemctl"
    elif [[ -f /etc/gentoo-release ]]; then
        DISTRO="gentoo"
        PACKAGE_MANAGER="emerge"
        SERVICE_MANAGER="rc-service"
    elif [[ -f /etc/alpine-release ]]; then
        DISTRO="alpine"
        PACKAGE_MANAGER="apk"
        SERVICE_MANAGER="rc-service"
    else
        DISTRO="unknown"
        print_warning "Unknown distribution detected. Some features may not work correctly."
    fi
    
    log "INFO" "Detected distribution: $DISTRO with package manager: $PACKAGE_MANAGER"
}

# Install packages based on distribution
install_package() {
    local package="$1"
    local alt_package="${2:-$package}"
    
    log "INFO" "Installing package: $package"
    
    case "$PACKAGE_MANAGER" in
        "pacman")
            pacman -S --noconfirm "$package" 2>/dev/null || pacman -S --noconfirm "$alt_package" || true
            ;;
        "apt")
            apt-get update -qq && apt-get install -y "$package" 2>/dev/null || apt-get install -y "$alt_package" || true
            ;;
        "dnf")
            dnf install -y "$package" 2>/dev/null || dnf install -y "$alt_package" || true
            ;;
        "yum")
            yum install -y "$package" 2>/dev/null || yum install -y "$alt_package" || true
            ;;
        "zypper")
            zypper install -y "$package" 2>/dev/null || zypper install -y "$alt_package" || true
            ;;
        "emerge")
            emerge "$package" 2>/dev/null || emerge "$alt_package" || true
            ;;
        "apk")
            apk add "$package" 2>/dev/null || apk add "$alt_package" || true
            ;;
        *)
            print_warning "Cannot install $package: unknown package manager"
            ;;
    esac
}

# Check and install dependencies
install_dependencies() {
    print_info "Checking and installing dependencies..."
    log "INFO" "Starting dependency installation"
    
    # Core dependencies
    install_package "tor" "tor"
    install_package "python3" "python3"
    install_package "iptables" "iptables"
    install_package "iproute2" "iproute2"
    
    # Optional dependencies based on distribution
    case "$DISTRO" in
        "arch")
            install_package "i2pd" "i2p"
            install_package "python-psutil" "python-pip"
            ;;
        "debian")
            install_package "i2p" "i2p"
            install_package "python3-psutil" "python3-pip"
            install_package "curl" "wget"
            ;;
        "redhat")
            install_package "python3-psutil" "python3-pip"
            install_package "curl" "wget"
            ;;
        *)
            install_package "python3-pip" "pip3"
            install_package "curl" "wget"
            ;;
    esac
    
    # Install Python dependencies if pip is available
    if command -v pip3 &> /dev/null; then
        log "INFO" "Installing Python dependencies"
        pip3 install --quiet psutil requests stem 2>/dev/null || true
    fi
    
    print_success "Dependencies installation completed"
    log "INFO" "Dependencies installation completed successfully"
}
#create Python core script
    cat > "$PYTHON_SCRIPT" << 'PYTHON_EOF'
 #!/usr/bin/env python3   
"""
Anonymous Shield Core - Python component for complex operations
"""

import os
import sys
import json
import time
import random
import socket
import psutil
import subprocess
import configparser
from pathlib import Path
from datetime import datetime

class AnonymousShieldCore:
    def __init__(self, config_dir):
        self.config_dir = Path(config_dir)
        self.config_file = self.config_dir / 'config.conf'
        self.tor_config = self.config_dir / 'torrc'
        self.original_mac_file = self.config_dir / 'original_macs.json'
        self.dns_backup_file = self.config_dir / 'dns_backup'
        
        self.load_config()
        
    def load_config(self):
        """Load configuration with defaults"""
        self.config = configparser.ConfigParser()
        
        # Set defaults
        defaults = {
            'general': {
                'auto_start_tor': 'true',
                'auto_start_i2p': 'false',
                'randomize_mac': 'true', 
                'secure_dns': 'true',
                'kill_switch': 'true',
                'stealth_mode': 'false'
            },
            'tor': {
                'socks_port': '9050',
                'control_port': '9051',
                'dns_port': '9053',
                'trans_port': '9040',
                'use_bridges': 'false',
                'bridge_list': ''
            },
            'i2p': {
                'http_proxy_port': '4444',
                'socks_proxy_port': '4447'
            },
            'dns': {
                'primary': '1.1.1.1',
                'secondary': '8.8.8.8',
                'fallback': '9.9.9.9'
            },
            'performance': {
                'max_circuits': '10',
                'circuit_timeout': '30',
                'connection_padding': 'true'
            }
        }
        
        for section, options in defaults.items():
            if not self.config.has_section(section):
                self.config.add_section(section)
            for key, value in options.items():
                if not self.config.has_option(section, key):
                    self.config.set(section, key, value)
        
        # Read existing config if available
        if self.config_file.exists():
            self.config.read(self.config_file)
        
        # Save config
        with open(self.config_file, 'w') as f:
            self.config.write(f)
    
    def get_network_interfaces(self):
        """Get all network interfaces"""
        interfaces = []
        try:
            for interface in psutil.net_if_addrs():
                if interface != 'lo':  # Skip loopback
                    interfaces.append(interface)
        except:
            # Fallback to ip command
            try:
                result = subprocess.run(['ip', 'link', 'show'], 
                                      capture_output=True, text=True)
                for line in result.stdout.split('\n'):
                    if ': ' in line and 'state' in line and 'lo:' not in line:
                        interface = line.split(':')[1].strip()
                        interfaces.append(interface)
            except:
                pass
        return interfaces
    
    def get_mac_address(self, interface):
        """Get MAC address of interface"""
        try:
            with open(f'/sys/class/net/{interface}/address', 'r') as f:
                return f.read().strip()
        except:
            return None
    
    def generate_random_mac(self):
        """Generate random MAC with proper format"""
        # Locally administered unicast MAC
        first_octet = (random.randint(0, 255) & 0xFC) | 0x02
        mac_bytes = [first_octet] + [random.randint(0, 255) for _ in range(5)]
        return ':'.join(f'{b:02x}' for b in mac_bytes)
    
    def randomize_mac_addresses(self):
        """Randomize MAC addresses for all interfaces"""
        if not self.config.getboolean('general', 'randomize_mac'):
            return {'success': True, 'message': 'MAC randomization disabled'}
        
        interfaces = self.get_network_interfaces()
        original_macs = {}
        results = []
        
        for interface in interfaces:
            original_mac = self.get_mac_address(interface)
            if original_mac:
                original_macs[interface] = original_mac
                new_mac = self.generate_random_mac()
                
                try:
                    # Change MAC address
                    subprocess.run(['ip', 'link', 'set', interface, 'down'], 
                                 check=True, capture_output=True)
                    subprocess.run(['ip', 'link', 'set', interface, 'address', new_mac], 
                                 check=True, capture_output=True)
                    subprocess.run(['ip', 'link', 'set', interface, 'up'], 
                                 check=True, capture_output=True)
                    
                    results.append(f"✓ {interface}: {original_mac} → {new_mac}")
                    
                except subprocess.CalledProcessError as e:
                    results.append(f"✗ {interface}: Failed - {str(e)}")
        
        # Save original MACs for restoration
        with open(self.original_mac_file, 'w') as f:
            json.dump(original_macs, f)
        
        return {
            'success': True,
            'message': 'MAC addresses randomized',
            'details': results
        }
    
    def restore_mac_addresses(self):
        """Restore original MAC addresses"""
        if not self.original_mac_file.exists():
            return {'success': True, 'message': 'No MAC addresses to restore'}
        
        try:
            with open(self.original_mac_file, 'r') as f:
                original_macs = json.load(f)
        except:
            return {'success': False, 'message': 'Failed to read original MAC addresses'}
        
        results = []
        for interface, original_mac in original_macs.items():
            try:
                subprocess.run(['ip', 'link', 'set', interface, 'down'], 
                             check=True, capture_output=True)
                subprocess.run(['ip', 'link', 'set', interface, 'address', original_mac], 
                             check=True, capture_output=True)
                subprocess.run(['ip', 'link', 'set', interface, 'up'], 
                             check=True, capture_output=True)
                results.append(f"✓ {interface}: Restored to {original_mac}")
            except subprocess.CalledProcessError as e:
                results.append(f"✗ {interface}: Failed - {str(e)}")
        
        # Remove the backup file
        self.original_mac_file.unlink()
        
        return {
            'success': True,
            'message': 'MAC addresses restored',
            'details': results
        }
    
    def setup_secure_dns(self):
        """Setup secure DNS configuration"""
        if not self.config.getboolean('general', 'secure_dns'):
            return {'success': True, 'message': 'Secure DNS disabled'}
        
        try:
            # Backup current DNS
            with open('/etc/resolv.conf', 'r') as f:
                dns_backup = f.read()
            
            with open(self.dns_backup_file, 'w') as f:
                f.write(dns_backup)
            
            # Write new DNS configuration
            dns_config = f"""# Anonymous Shield DNS Configuration
nameserver {self.config.get('dns', 'primary')}
nameserver {self.config.get('dns', 'secondary')}
nameserver {self.config.get('dns', 'fallback')}
options edns0 trust-ad single-request-reopen
"""
            
            # Make resolv.conf immutable temporarily
            subprocess.run(['chattr', '-i', '/etc/resolv.conf'], 
                         capture_output=True, stderr=subprocess.DEVNULL)
            
            with open('/etc/resolv.conf', 'w') as f:
                f.write(dns_config)
            
            subprocess.run(['chattr', '+i', '/etc/resolv.conf'], 
                         capture_output=True, stderr=subprocess.DEVNULL)
            
            return {'success': True, 'message': 'Secure DNS configured'}
            
        except Exception as e:
            return {'success': False, 'message': f'DNS setup failed: {str(e)}'}
    
    def restore_dns(self):
        """Restore original DNS configuration"""
        if not self.dns_backup_file.exists():
            return {'success': True, 'message': 'No DNS backup to restore'}
        
        try:
            subprocess.run(['chattr', '-i', '/etc/resolv.conf'], 
                         capture_output=True, stderr=subprocess.DEVNULL)
            
            with open(self.dns_backup_file, 'r') as f:
                dns_backup = f.read()
            
            with open('/etc/resolv.conf', 'w') as f:
                f.write(dns_backup)
            
            self.dns_backup_file.unlink()
            
            return {'success': True, 'message': 'DNS configuration restored'}
            
        except Exception as e:
            return {'success': False, 'message': f'DNS restore failed: {str(e)}'}
    
    def create_tor_config(self):
        """Create optimized Tor configuration"""
        torrc_content = f"""# Anonymous Shield Tor Configuration
SocksPort {self.config.get('tor', 'socks_port')} IsolateDestAddr IsolateDestPort
ControlPort {self.config.get('tor', 'control_port')}
DNSPort {self.config.get('tor', 'dns_port')}
TransPort {self.config.get('tor', 'trans_port')} IsolateClientAddr IsolateSOCKSAuth IsolateClientProtocol IsolateDestPort IsolateDestAddr

# Performance optimizations
AutomapHostsOnResolve 1
VirtualAddrNetworkIPv4 10.192.0.0/10
VirtualAddrNetworkIPv6 [FC00::]/7

# Security settings
AvoidDiskWrites 1
SafeLogging 1
MaxCircuitDirtiness {self.config.get('performance', 'circuit_timeout')}
MaxClientCircuitsPending {self.config.get('performance', 'max_circuits')}

# Connection settings
ConnectionPadding {self.config.get('performance', 'connection_padding')}
ReducedConnectionPadding 0

# Bandwidth optimizations
RelayBandwidthRate 0
RelayBandwidthBurst 0

# Directory settings
FetchDirInfoEarly 1
FetchDirInfoExtraEarly 1
FetchUselessDescriptors 0

# Circuit settings
CircuitBuildTimeout 30
CircuitIdleTimeout 30
NewCircuitPeriod 30
MaxCircuitDirtiness 600

# Client settings
ClientOnly 1
ClientRejectInternalAddresses 1
ClientPreferIPv6ORPort auto
ClientPreferIPv6DirPort auto
"""
        
        # Add bridge configuration if enabled
        if self.config.getboolean('tor', 'use_bridges'):
            bridge_list = self.config.get('tor', 'bridge_list')
            if bridge_list:
                torrc_content += "\n# Bridge configuration\nUseBridges 1\n"
                for bridge in bridge_list.split(','):
                    torrc_content += f"Bridge {bridge.strip()}\n"
        
        # Stealth mode configuration
        if self.config.getboolean('general', 'stealth_mode'):
            torrc_content += """
# Stealth mode settings
ExitPolicy reject *:*
PublishServerDescriptor 0
AssumeReachable 1
"""
        
        with open(self.tor_config, 'w') as f:
            f.write(torrc_content)
        
        return {'success': True, 'message': 'Tor configuration created'}
    
    def get_status(self):
        """Get current anonymization status"""
        status = {
            'tor_running': self.is_port_open('127.0.0.1', int(self.config.get('tor', 'socks_port'))),
            'i2p_running': self.is_port_open('127.0.0.1', int(self.config.get('i2p', 'http_proxy_port'))),
            'mac_randomized': self.original_mac_file.exists(),
            'dns_secured': self.dns_backup_file.exists(),
            'interfaces': {},
            'tor_ip': None
        }
        
        # Get interface information
        for interface in self.get_network_interfaces():
            mac = self.get_mac_address(interface)
            status['interfaces'][interface] = {
                'mac': mac,
                'randomized': self.original_mac_file.exists()
            }
        
        return status
    
    def is_port_open(self, host, port):
        """Check if a port is open"""
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(3)
            result = sock.connect_ex((host, port))
            sock.close()
            return result == 0
        except:
            return False

def main():
    if len(sys.argv) < 3:
        print("Usage: python3 anon_shield_core.py <config_dir> <command> [args]")
        sys.exit(1)
    
    config_dir = sys.argv[1]
    command = sys.argv[2]
    
    core = AnonymousShieldCore(config_dir)
    
    if command == 'randomize_mac':
        result = core.randomize_mac_addresses()
    elif command == 'restore_mac':
        result = core.restore_mac_addresses()
    elif command == 'setup_dns':
        result = core.setup_secure_dns()
    elif command == 'restore_dns':
        result = core.restore_dns()
    elif command == 'create_tor_config':
        result = core.create_tor_config()
    elif command == 'status':
        result = core.get_status()
    else:
        result = {'success': False, 'message': f'Unknown command: {command}'}
    
    print(json.dumps(result, indent=2))

if __name__ == "__main__":
    main()
PYTHON_EOF

    chmod +x "$PYTHON_SCRIPT"
}

# Call Python core function
call_python_core() {
    local command="$1"
    shift
    python3 "$PYTHON_SCRIPT" "$CONFIG_DIR" "$command" "$@" 2>/dev/null || echo '{"success": false, "message": "Python core execution failed"}'
}

# Setup configuration directory
setup_config() {
    mkdir -p "$CONFIG_DIR"
    
    if [[ ! -f "$CONFIG_FILE" ]]; then
        cat > "$CONFIG_FILE" << 'EOF'
# Anonymous Shield Configuration File
# Edit this file to customize settings

[general]
auto_start_tor=true
auto_start_i2p=false
randomize_mac=true
secure_dns=true
kill_switch=true
stealth_mode=false

[tor]
socks_port=9050
control_port=9051
dns_port=9053
trans_port=9040
use_bridges=false
bridge_list=

[i2p]
http_proxy_port=4444
socks_proxy_port=4447

[dns]
primary=1.1.1.1
secondary=8.8.8.8
fallback=9.9.9.9

[performance]
max_circuits=10
circuit_timeout=30
connection_padding=true
EOF
    fi
}

# Service management functions
start_service() {
    local service="$1"
    case "$SERVICE_MANAGER" in
        "systemctl")
            systemctl start "$service" 2>/dev/null || true
            systemctl enable "$service" 2>/dev/null || true
            ;;
        "rc-service")
            rc-service "$service" start 2>/dev/null || true
            rc-update add "$service" default 2>/dev/null || true
            ;;
    esac
}

stop_service() {
    local service="$1"
    case "$SERVICE_MANAGER" in
        "systemctl")
            systemctl stop "$service" 2>/dev/null || true
            ;;
        "rc-service")
            rc-service "$service" stop 2>/dev/null || true
            ;;
    esac
}

# Firewall rules setup
setup_firewall() {
    print_info "Setting up firewall rules..."
    
    # Clear existing rules
    iptables -F 2>/dev/null || true
    iptables -t nat -F 2>/dev/null || true
    iptables -t mangle -F 2>/dev/null || true
    
    # Set default policies
    iptables -P INPUT DROP
    iptables -P FORWARD DROP
    iptables -P OUTPUT DROP
    
    # Allow loopback
    iptables -A INPUT -i lo -j ACCEPT
    iptables -A OUTPUT -o lo -j ACCEPT
    
    # Allow established connections
    iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    
    # Allow Tor
    iptables -A OUTPUT -p tcp --dport 9001:9030 -j ACCEPT
    iptables -A OUTPUT -p tcp --dport 80 -j ACCEPT
    iptables -A OUTPUT -p tcp --dport 443 -j ACCEPT
    iptables -A OUTPUT -p tcp --dport 9050 -j ACCEPT
    iptables -A OUTPUT -p tcp --dport 9051 -j ACCEPT
    
    # Allow DNS through Tor
    iptables -A OUTPUT -p udp --dport 53 -m owner --uid-owner tor -j ACCEPT
    iptables -A OUTPUT -p tcp --dport 53 -m owner --uid-owner tor -j ACCEPT
    
    # Transparent proxy rules
    iptables -t nat -A OUTPUT -p tcp --dport 80 -j REDIRECT --to-port 9040
    iptables -t nat -A OUTPUT -p tcp --dport 443 -j REDIRECT --to-port 9040
    
    # Block non-Tor traffic (kill switch)
    iptables -A OUTPUT -m owner --uid-owner tor -j ACCEPT
    iptables -A OUTPUT -p tcp --dport 9050 -j ACCEPT
    iptables -A OUTPUT -j DROP
    
    print_success "Firewall configured with kill switch"
    FIREWALL_ACTIVE=true
}

# Clear firewall rules
clear_firewall() {
    print_info "Clearing firewall rules..."
    
    iptables -F 2>/dev/null || true
    iptables -t nat -F 2>/dev/null || true
    iptables -t mangle -F 2>/dev/null || true
    
    iptables -P INPUT ACCEPT
    iptables -P FORWARD ACCEPT
    iptables -P OUTPUT ACCEPT
    
    print_success "Firewall rules cleared"
    FIREWALL_ACTIVE=false
}

# Start Tor service
start_tor() {
    print_info "Starting Tor service..."
    
    # Create Tor configuration
    local result
    result=$(call_python_core "create_tor_config")
    if [[ $(echo "$result" | jq -r '.success') != "true" ]]; then
        print_error "Failed to create Tor configuration"
        return 1
    fi
    
    # Start Tor with custom config
    tor -f "$CONFIG_DIR/torrc" --DataDirectory "$CONFIG_DIR/tor_data" --RunAsDaemon 1 --PidFile "$CONFIG_DIR/tor.pid" 2>/dev/null || {
        # Fallback to system service
        start_service "tor"
    }
    
    # Wait for Tor to start
    local retries=0
    while [[ $retries -lt 30 ]]; do
        if nc -z 127.0.0.1 9050 2>/dev/null; then
            print_success "Tor started successfully"
            TOR_RUNNING=true
            return 0
        fi
        sleep 1
        ((retries++))
    done
    
    print_error "Failed to start Tor"
    return 1
}

# Stop Tor service
stop_tor() {
    print_info "Stopping Tor service..."
    
    # Kill custom Tor process
    if [[ -f "$CONFIG_DIR/tor.pid" ]]; then
        kill "$(cat "$CONFIG_DIR/tor.pid")" 2>/dev/null || true
        rm -f "$CONFIG_DIR/tor.pid"
    fi
    
    # Stop system service
    stop_service "tor"
    
    print_success "Tor stopped"
    TOR_RUNNING=false
}

# Start I2P service
start_i2p() {
    print_info "Starting I2P service..."
    
    case "$DISTRO" in
        "arch")
            start_service "i2pd"
            ;;
        *)
            start_service "i2p"
            ;;
    esac
    
    # Check if I2P started
    sleep 10
    if nc -z 127.0.0.1 4444 2>/dev/null; then
        print_success "I2P started successfully"
        I2P_RUNNING=true
    else
        print_warning "I2P may not be running properly"
    fi
}

# Stop I2P service  
stop_i2p() {
    print_info "Stopping I2P service..."
    
    case "$DISTRO" in
        "arch")
            stop_service "i2pd"
            ;;
        *)
            stop_service "i2p"
            ;;
    esac
    
    print_success "I2P stopped" 
    I2P_RUNNING=false
}

# Main start function
start_shield() {
    print_banner
    print_info "Starting Anonymous Network Shield..."
    log "INFO" "Shield activation started"
    
    # Create Python core if it doesn't exist
    [[ ! -f "$PYTHON_SCRIPT" ]] && create_python_core
    
    local success=0
    
    # Randomize MAC addresses
    local mac_result
    mac_result=$(call_python_core "randomize_mac")
    if [[ $(echo "$mac_result" | jq -r '.success') == "true" ]]; then
        print_success "MAC addresses randomized"
        MAC_RANDOMIZED=true
        echo "$mac_result" | jq -r '.details[]' 2>/dev/null | while read -r line; do
            print_info "  $line"
        done
    else
        print_error "MAC randomization failed"
        ((success++))
    fi
    
    # Setup secure DNS
    local dns_result
    dns_result=$(call_python_core "setup_dns")
    if [[ $(echo "$dns_result" | jq -r '.success') == "true" ]]; then
        print_success "Secure DNS configured"
        DNS_SECURED=true
    else
        print_error "DNS setup failed"
        ((success++))
    fi
    
    # Start Tor
    if start_tor; then
        :
    else
        ((success++))
    fi
    
    # Start I2P (optional)
    if grep -q "auto_start_i2p=true" "$CONFIG_FILE" 2>/dev/null; then
        start_i2p
    fi
    
    # Setup firewall
    if grep -q "kill_switch=true" "$CONFIG_FILE" 2>/dev/null; then
        setup_firewall
    fi
    
    # Save PID
    echo $ > "$PID_FILE"
    
    if [[ $success -eq 0 ]]; then
        print_success "Anonymous Network Shield activated successfully!"
        log "INFO" "Shield fully activated"
    else
        print_warning "Anonymous Network Shield activated with $success issues"
        log "WARNING" "Shield activated with issues"
    fi
    
    # Show status
    show_status
}

# Main stop function
stop_shield() {
    print_info "Stopping Anonymous Network Shield..."
    log "INFO" "Shield deactivation started"
    
    # Clear firewall rules
    clear_firewall
    
    # Stop services
    stop_tor
    stop_i2p
    
    # Restore DNS
    local dns_result
    dns_result=$(call_python_core "restore_dns")
    if [[ $(echo "$dns_result" | jq -r '.success') == "true" ]]; then
        print_success "DNS configuration restored"
        DNS_SECURED=false
    else
        print_warning "DNS restore may have failed"
    fi
    
    # Restore MAC addresses
    local mac_result
    mac_result=$(call_python_core "restore_mac")
    if [[ $(echo "$mac_result" | jq -r '.success') == "true" ]]; then
        print_success "MAC addresses restored"
        MAC_RANDOMIZED=false
        echo "$mac_result" | jq -r '.details[]' 2>/dev/null | while read -r line; do
            print_info "  $line"
        done
    else
        print_warning "MAC restoration may have failed"
    fi
    
    # Remove PID file
    rm -f "$PID_FILE"
    
    print_success "Anonymous Network Shield deactivated"
    log "INFO" "Shield fully deactivated"
}

# Show current status
show_status() {
    print_banner
    
    local status_result
    status_result=$(call_python_core "status")
    
    if [[ $(echo "$status_result" | jq -r '.tor_running') == "true" ]]; then
        print_success "Tor: Running on port $(grep socks_port= "$CONFIG_FILE" 2>/dev/null | cut -d= -f2 || echo 9050)"
    else
        print_error "Tor: Not running"
    fi
    
    if [[ $(echo "$status_result" | jq -r '.i2p_running') == "true" ]]; then
        print_success "I2P: Running on port $(grep http_proxy_port= "$CONFIG_FILE" 2>/dev/null | cut -d= -f2 || echo 4444)"
    else
        print_info "I2P: Not running"
    fi
    
    if [[ $(echo "$status_result" | jq -r '.mac_randomized') == "true" ]]; then
        print_success "MAC Addresses: Randomized"
        echo "$status_result" | jq -r '.interfaces | to_entries[] | "  \(.key): \(.value.mac)"' 2>/dev/null
    else
        print_info "MAC Addresses: Original"
    fi
    
    if [[ $(echo "$status_result" | jq -r '.dns_secured') == "true" ]]; then
        print_success "DNS: Secured"
    else
        print_info "DNS: Default"
    fi
    
    if [[ $FIREWALL_ACTIVE == true ]]; then
        print_success "Firewall: Active (Kill Switch Enabled)"
    else
        print_info "Firewall: Default"
    fi
    
    # Test connectivity
    print_info "Testing anonymity..."
    test_anonymity
}

# Test anonymity
test_anonymity() {
    # Test Tor connectivity
    if command -v curl >/dev/null 2>&1; then
        local tor_ip
        tor_ip=$(curl -s --socks5 127.0.0.1:9050 https://check.torproject.org/api/ip 2>/dev/null | jq -r .IP 2>/dev/null)
        if [[ -n "$tor_ip" && "$tor_ip" != "null" ]]; then
            print_success "Tor IP: $tor_ip"
        else
            print_warning "Tor connectivity test failed"
        fi
        
        # Test regular IP (should fail with kill switch)
        local regular_ip
        regular_ip=$(timeout 5 curl -s https://ipinfo.io/ip 2>/dev/null || echo "blocked")
        if [[ "$regular_ip" == "blocked" ]]; then
            print_success "Kill Switch: Working (direct connections blocked)"
        else
            print_warning "Kill Switch: May not be working (IP: $regular_ip)"
        fi
    else
        print_warning "curl not available for connectivity testing"
    fi
}

# Configuration management
edit_config() {
    if command -v nano >/dev/null 2>&1; then
        nano "$CONFIG_FILE"
    elif command -v vim >/dev/null 2>&1; then
        vim "$CONFIG_FILE"
    elif command -v vi >/dev/null 2>&1; then
        vi "$CONFIG_FILE"
    else
        print_info "Configuration file location: $CONFIG_FILE"
        print_info "Edit with your preferred text editor"
        cat "$CONFIG_FILE"
    fi
}

# System optimization
optimize_system() {
    print_info "Applying system optimizations for anonymity..."
    
    # Disable IPv6 to prevent leaks
    echo 'net.ipv6.conf.all.disable_ipv6 = 1' > /etc/sysctl.d/99-anon-shield.conf
    echo 'net.ipv6.conf.default.disable_ipv6 = 1' >> /etc/sysctl.d/99-anon-shield.conf
    
    # Network optimizations
    echo 'net.core.rmem_max = 16777216' >> /etc/sysctl.d/99-anon-shield.conf
    echo 'net.core.wmem_max = 16777216' >> /etc/sysctl.d/99-anon-shield.conf
    echo 'net.ipv4.tcp_rmem = 4096 16384 16777216' >> /etc/sysctl.d/99-anon-shield.conf
    echo 'net.ipv4.tcp_wmem = 4096 16384 16777216' >> /etc/sysctl.d/99-anon-shield.conf
    
    # Apply settings
    sysctl -p /etc/sysctl.d/99-anon-shield.conf >/dev/null 2>&1
    
    print_success "System optimizations applied"
}

# Cleanup function
cleanup_system() {
    print_info "Cleaning up system optimizations..."
    
    rm -f /etc/sysctl.d/99-anon-shield.conf
    
    # Reset to defaults
    sysctl -w net.ipv6.conf.all.disable_ipv6=0 >/dev/null 2>&1
    sysctl -w net.ipv6.conf.default.disable_ipv6=0 >/dev/null 2>&1
    
    print_success "System optimizations removed"
}

# Bridge management for censored networks
setup_bridges() {
    print_info "Setting up Tor bridges for censored networks..."
    
    local bridge_type
    echo "Select bridge type:"
    echo "1) obfs4 (recommended)"
    echo "2) meek-azure"
    echo "3) snowflake"
    echo "4) Custom"
    read -r -p "Choice (1-4): " bridge_type
    
    case "$bridge_type" in
        1)
            print_info "Fetching obfs4 bridges..."
            # This would normally fetch from Tor's bridge database
            print_info "Please get bridges from https://bridges.torproject.org/"
            ;;
        2)
            sed -i 's/use_bridges=false/use_bridges=true/' "$CONFIG_FILE"
            sed -i 's/bridge_list=/bridge_list=meek 0.0.2.0:2 url=https:\/\/meek.azureedge.net\/ front=ajax.aspnetcdn.com/' "$CONFIG_FILE"
            ;;
        3)
            sed -i 's/use_bridges=false/use_bridges=true/' "$CONFIG_FILE"
            sed -i 's/bridge_list=/bridge_list=snowflake 192.0.2.3:1 2B280B23E1107BB62ABFC40DDCC8824814F80A72/' "$CONFIG_FILE"
            ;;
        4)
            print_info "Edit the config file to add custom bridges"
            edit_config
            ;;
    esac
    
    print_success "Bridge configuration updated"
}

# Monitor function
monitor_shield() {
    print_info "Starting Anonymous Shield Monitor..."
    
    while true; do
        clear
        show_status
        echo ""
        print_info "Press Ctrl+C to stop monitoring"
        sleep 10
    done
}

# Help function
show_help() {
    print_banner
    cat << 'EOF'
USAGE:
    sudo ./anon_shield.sh [COMMAND]

COMMANDS:
    start           Start the anonymization shield
    stop            Stop the anonymization shield
    restart         Restart the shield
    status          Show current status
    config          Edit configuration file
    install         Install dependencies
    optimize        Apply system optimizations
    cleanup         Remove system optimizations
    bridges         Setup Tor bridges
    monitor         Monitor shield status
    test            Test anonymity
    help            Show this help message

CONFIGURATION:
    Config file: ~/.anon_shield/config.conf
    Log file:    ~/.anon_shield/shield.log
    
SUPPORTED DISTRIBUTIONS:
    - Arch Linux (pacman)
    - Ubuntu/Debian (apt)
    - RHEL/CentOS/Fedora (yum/dnf)
    - openSUSE (zypper)
    - Gentoo (emerge)
    - Alpine Linux (apk)

FEATURES:
    ✓ Tor anonymization with optimized configuration
    ✓ I2P support for additional anonymity layer
    ✓ MAC address randomization
    ✓ Secure DNS configuration
    ✓ Firewall kill switch
    ✓ Bridge support for censored networks
    ✓ Multi-distribution compatibility
    ✓ System optimizations for performance
    ✓ Real-time monitoring
    ✓ Automatic restoration on exit

EXAMPLES:
    sudo ./anon_shield.sh install    # Install dependencies
    sudo ./anon_shield.sh optimize   # Apply optimizations
    sudo ./anon_shield.sh start      # Start anonymization
    sudo ./anon_shield.sh monitor    # Monitor status
    sudo ./anon_shield.sh stop       # Stop anonymization

For more information, visit: https://github.com/anonymous-shield
EOF
}

# Main function
main() {
    # Setup
    detect_distro
    setup_config
    
    # Check for command
    if [[ $# -eq 0 ]]; then
        show_help
        exit 1
    fi
    
    local command="$1"
    
    case "$command" in
        "start")
            check_root
            start_shield
            ;;
        "stop")
            check_root
            stop_shield
            ;;
        "restart")
            check_root
            stop_shield
            sleep 2
            start_shield
            ;;
        "status")
            show_status
            ;;
        "config")
            edit_config
            ;;
        "install")
            check_root
            install_dependencies
            create_python_core
            ;;
        "optimize")
            check_root
            optimize_system
            ;;
        "cleanup")
            check_root
            cleanup_system
            ;;
        "bridges")
            setup_bridges
            ;;
        "monitor")
            monitor_shield
            ;;
        "test")
            test_anonymity
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_error "Unknown command: $command"
            show_help
            exit 1
            ;;
    esac
}

# Signal handlers
trap 'print_warning "Interrupted! Cleaning up..."; stop_shield; exit 130' INT TERM

# Run main function
main "$@"
